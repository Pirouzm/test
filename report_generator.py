import logging
import os
from openai import OpenAI
import json
from datetime import datetime

# Configure logger
logger = logging.getLogger(__name__)

# Initialize OpenAI client
# the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
# do not change this unless explicitly requested by the user
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai = OpenAI(api_key=OPENAI_API_KEY)

def generate_esa_report(chat_messages, documents):
    """
    Generate a comprehensive ESA report based on chat history and uploaded documents
    
    Args:
        chat_messages (list): List of ChatMessage objects containing conversation history
        documents (list): List of Document objects that have been processed
        
    Returns:
        str: Generated ESA report content
    """
    try:
        # Format chat history for context
        conversation = []
        for msg in chat_messages:
            conversation.append({
                "role": msg.role,
                "content": msg.content
            })
        
        # Create a prompt for the OpenAI API
        system_prompt = """
        You are a professional mental health specialist tasked with creating a formal Emotional Support Animal (ESA) report.
        Use the conversation history and any relevant document content to generate a comprehensive ESA report.
        
        The report should include:
        1. Patient Information (use information from the conversation)
        2. Diagnostic Assessment (based on conversation and documents)
        3. Treatment History and Recommendations
        4. Specific ways an ESA would help this individual
        5. Professional Recommendation
        
        Keep the tone professional and clinical. Format the report professionally with clear sections and subsections.
        Include specific details from the conversation that support the need for an ESA.
        Do not invent information that is not present in the provided materials.
        """
        
        # Format document information if available
        document_context = ""
        if documents:
            document_context = "Additional relevant information from supporting documents:\n\n"
            for doc in documents:
                document_context += f"From document '{doc.filename}':\n"
                document_context += f"File type: {doc.file_type}\n"
                document_context += f"Uploaded on: {doc.upload_date.strftime('%Y-%m-%d')}\n\n"
        
        # Prepare messages for OpenAI API
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Here is the conversation history between the patient and the AI assistant:\n\n{json.dumps(conversation, indent=2)}\n\n{document_context}\n\nPlease generate a comprehensive ESA report based on this information."}
        ]
        
        # Generate report
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        
        report_content = response.choices[0].message.content
        
        # Add header with date and disclaimer
        current_date = datetime.now().strftime("%B %d, %Y")
        header = f"""
        EMOTIONAL SUPPORT ANIMAL (ESA) RECOMMENDATION REPORT
        
        Date: {current_date}
        
        DISCLAIMER: This report was generated with the assistance of artificial intelligence based on information provided through conversation and supporting documents. It should be reviewed by a licensed mental health professional before being used for official purposes.
        
        """
        
        footer = """
        
        IMPORTANT NOTICE: 
        This document is not a substitute for a report generated by a licensed mental health professional.
        To use an ESA report for housing or travel accommodations, please consult with a licensed healthcare provider.
        """
        
        final_report = header + report_content + footer
        
        return final_report
        
    except Exception as e:
        logger.error(f"Error generating ESA report: {str(e)}")
        return "Error generating report. Please try again later."
